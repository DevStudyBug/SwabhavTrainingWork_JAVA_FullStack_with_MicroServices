-- Step 1: Create the database
CREATE DATABASE IF NOT EXISTS food_ordering_advanced;
USE food_ordering_advanced;

-- Step 2: Menu Items Table
CREATE TABLE IF NOT EXISTS menu_items (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL UNIQUE,
    price DECIMAL(10, 2) NOT NULL
);


INSERT INTO menu_items (name, price) VALUES 
('Pizza', 250),
('Burger', 150),
('Fries', 80),
('Pasta', 180),
('Biryani', 220),
('Ice Cream', 90),
('Momos', 120),
('Sandwich', 100)
ON DUPLICATE KEY UPDATE price = VALUES(price);



-- Step 3: Customers Table
CREATE TABLE IF NOT EXISTS customers (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    mobile VARCHAR(15) NOT NULL
);

-- Optional: Add test customers
INSERT INTO customers (name, mobile) VALUES 
('Alok', '9876543210'),
('Soham', '9123456789');

-- Step 4: Delivery Partners Table
CREATE TABLE IF NOT EXISTS delivery_partners (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    contact VARCHAR(20) NOT NULL
);

INSERT INTO delivery_partners (name, contact) VALUES 
('Swiggy Rider', '9876543210'),
('Zomato Agent', '9123456789');

-- Step 5: Orders Table
CREATE TABLE IF NOT EXISTS orders (
    id INT PRIMARY KEY AUTO_INCREMENT,
    customer_id INT,
    partner_id INT,
    total_amount DOUBLE,
    discount_applied DOUBLE,
    coupon_code VARCHAR(20),
    final_amount DOUBLE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (customer_id) REFERENCES customers(id),
    FOREIGN KEY (partner_id) REFERENCES delivery_partners(id)
);
ALTER TABLE orders
ADD COLUMN payment_mode VARCHAR(50) DEFAULT 'Cash';

-- Step 6: Order Items Table (Items under each order)
CREATE TABLE IF NOT EXISTS order_items (
    id INT PRIMARY KEY AUTO_INCREMENT,
    order_id INT,
    menu_item_id INT,
    quantity INT,
    FOREIGN KEY (order_id) REFERENCES orders(id),
    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)
);

-- Step 7: Coupons Table
CREATE TABLE IF NOT EXISTS coupons (
    code VARCHAR(20) PRIMARY KEY,
    customer_id INT,
    discount_percent DOUBLE,
    min_order_value DOUBLE,
    is_used BOOLEAN DEFAULT FALSE,
    FOREIGN KEY (customer_id) REFERENCES customers(id)
);

-- Optional: Add test coupon
INSERT INTO coupons (code, customer_id, discount_percent, min_order_value, is_used)
VALUES ('FB300', 1, 5, 300, FALSE);
